{"version":3,"sources":["nodejs-platform.ts"],"names":[],"mappings":";;AAKA;IAEE,YAAmB,MAAe,EAAE,KAAY;QAA7B,WAAM,GAAN,MAAM,CAAS;QAUlC;;UAEE;QACF,SAAI,GAAa,QAAQ,CAAC,CAAC;QAZzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAoBD;;;;MAIE;IACF,qBAAqB,CAAC,QAA+C;QACnE,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED;;;MAGE;IACF,UAAU,CAAC,QAAiD;QAC1D,sBAAsB;IACxB,CAAC;IACD;;;;;MAKE;IACF,gBAAgB,CAAC,SAAiB,EAAE,QAAkB,EAAE,OAAiB;QACvE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAO,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IACD;;;;;MAKE;IACF,mBAAmB,CAAC,SAAiB,EAAE,QAAkB,EAAE,OAAiB;QAC1E,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAO,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrE,CAAC;CAMF;AAnED,wCAmEC","file":"nodejs-platform.js","sourcesContent":["import { IPlatform } from './platform';\nimport { IPerformance } from './performance';\nimport { IGlobal } from './global';\nimport { JSDOM } from 'jsdom';\n\nexport class NodeJsPlatform implements IPlatform {\n\n  constructor(public global: IGlobal, jsdom: JSDOM) {\n    this.performance = this.global.performance;\n    this.location = this.global.location;\n    this.history = this.global.history;\n    this.XMLHttpRequest = this.global.XMLHttpRequest;\n    this.jsdom = jsdom;\n  }\n\n  jsdom: JSDOM;\n\n  /**\n  * A function wich does nothing.\n  */\n  noop: Function = () => { };\n  /**\n  * The runtime's location API.\n  */\n  location: Object;\n  /**\n  * The runtime's history API.\n  */\n  history: Object;\n  /**\n  * The runtime's performance API\n  */\n  performance: IPerformance;\n  /**\n  * Registers a function to call when the system is ready to update (repaint) the display.\n  * @param callback The function to call.\n  * @return A long integer value, the request id, that uniquely identifies the entry in the callback list.\n  */\n  requestAnimationFrame(callback: (animationFrameStart: number) => void): number {\n    return setImmediate(callback);\n  }\n\n  /**\n  * Iterate all modules loaded by the script loader.\n  * @param callback A callback that will receive each module id along with the module object. Return true to end enumeration.\n  */\n  eachModule(callback: (key: string, value: Object) => boolean): void {\n    //TODO: What is this? \n  }\n  /**\n  * Add a global event listener.\n  * @param eventName A string representing the event type to listen for.\n  * @param callback The function that receives a notification when an event of the specified type occurs.\n  * @param capture If true, useCapture indicates that the user wishes to initiate capture.\n  */\n  addEventListener(eventName: string, callback: Function, capture?: boolean): void {\n    this.global.addEventListener(eventName, <any>callback, capture);\n  }\n  /**\n  * Remove a global event listener.\n  * @param eventName A string representing the event type to listen for.\n  * @param callback The function to remove from the event.\n  * @param capture Specifies whether the listener to be removed was registered as a capturing listener or not.\n  */\n  removeEventListener(eventName: string, callback: Function, capture?: boolean): void {\n    this.global.removeEventListener(eventName, <any>callback, capture);\n  }\n\n  /**\n  * The runtime's XMLHttpRequest API.\n  */\n  XMLHttpRequest: typeof XMLHttpRequest;\n}\n"],"sourceRoot":"../src/"}