{"version":3,"sources":["polyfills/jsdom-whole-text.ts"],"names":[],"mappings":";AAAA,qCAAqC;;AAErC,sEAAkF;AAClF,gEAAwE;AACxE,8DAA8D;AAC9D,0FAAgF;AAEhF;IACE;QACE,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,IAAI,CAAC;QACT,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,OAAO,CAAC,IAAI,GAAG,kCAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,SAAS,EAAE,CAAC;YAChG,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YACzC,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QACD,OAAO,GAAG,IAAI,CAAC;QACf,OAAO,CAAC,IAAI,GAAG,kCAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,SAAS,EAAE,CAAC;YAC5F,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC;YAC9B,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAAA,CAAC;IACF,MAAM,yBAAyB,GAAG,CAAC,0BAAQ,CAAC,SAAS,EAAE,gBAAI,CAAC,SAAS,CAAkB,CAAC;IACxF,yBAAyB,CAAC,OAAO,CAAC,cAAc;QAC9C,EAAE,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAAC,MAAM,CAAC;QACvD,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,WAAW,EAAE;YACjD,GAAG,EAAE,SAAS;YACd,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAzBD,8CAyBC","file":"jsdom-whole-text.js","sourcesContent":["/// <reference path=\"./jsdom.d.ts\" />\n\nimport {implementation as TextImpl} from 'jsdom/lib/jsdom/living/nodes/Text-impl';\nimport {interface as Text} from 'jsdom/lib/jsdom/living/generated/Text';\nimport * as NODE_TYPE from 'jsdom/lib/jsdom/living/node-type';\nimport {domSymbolTree} from 'jsdom/lib/jsdom/living/helpers/internal-constants';\n\nexport function polyfillWholeText() {\n  function wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  };\n  const implementationsToPolyfill = [TextImpl.prototype, Text.prototype] as Array<Object>;\n  implementationsToPolyfill.forEach(implementation => {\n    if (implementation.hasOwnProperty('wholeText')) return;\n    Object.defineProperty(implementation, 'wholeText', {\n      get: wholeText,\n      enumerable: true,\n      configurable: true\n    });\n  });\n}\n"],"sourceRoot":"../../../src/"}