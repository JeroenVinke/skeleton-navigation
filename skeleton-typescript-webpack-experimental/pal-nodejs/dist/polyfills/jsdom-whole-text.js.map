{"version":3,"sources":["polyfills/jsdom-whole-text.ts"],"names":[],"mappings":";AAAA,qCAAqC;;AAOrC;IACC;;;;;;;;;;;;;;;;;;;;;;;UAuBM;AACP,CAAC;AAzBD,8CAyBC","file":"jsdom-whole-text.js","sourcesContent":["/// <reference path=\"./jsdom.d.ts\" />\n\nimport {implementation as TextImpl} from 'jsdom/lib/jsdom/living/nodes/Text-impl';\nimport {interface as Text} from 'jsdom/lib/jsdom/living/generated/Text';\nimport * as NODE_TYPE from 'jsdom/lib/jsdom/living/node-type';\nimport {domSymbolTree} from 'jsdom/lib/jsdom/living/helpers/internal-constants';\n\nexport function polyfillWholeText() {\n /* function wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  };\n  const implementationsToPolyfill = [TextImpl.prototype, Text.prototype] as Array<Object>;\n  implementationsToPolyfill.forEach(implementation => {\n    if (implementation.hasOwnProperty('wholeText')) return;\n    Object.defineProperty(implementation, 'wholeText', {\n      get: wholeText,\n      enumerable: true,\n      configurable: true\n    });\n  });*/\n}\n"],"sourceRoot":"../../../src/"}